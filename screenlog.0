
[linzhou@bart2 zaesrnn]$ 
[linzhou@bart2 zaesrnn]$ 
[linzhou@bart2 zaesrnn]$ 
[linzhou@bart2 zaesrnn]$ 
[linzhou@bart2 zaesrnn]$ THEANO_FLAGS=device=gpu,floatX=float32 python srnnmultilayer_on_chars.py 
Using gpu device 1: GeForce GTX TITAN (CNMeM is disabled)
... loading data
Done. Converting to one hot...
Terminated
[linzhou@bart2 zaesrnn]$ re[K[Kg[Kfree
             total       used       free     shared    buffers     cached
Mem:      12323072    1182376   11140696          0      15104     624248
-/+ buffers/cache:     543024   11780048
Swap:     12233460     263984   11969476
[linzhou@bart2 zaesrnn]$ pyhotn[K[K[K[Kthon
Python 2.7.10 |Anaconda 2.2.0 (64-bit)| (default, Sep 15 2015, 14:50:01) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://anaconda.org
>>> import theano
>>> impoetr[K[K[Krt thesan[K[K[Kano.tensor as T
>>> x = T.matrix()
>>> weights = [1P[1P[1P[1P[1P[1P[C[C[CT.shared()[1P.shared()t.shared()h.shared()e.shared()a.shared()n.shared()o.shared()[1Pshared().shared()[C[C[C[C[C[C[C[C[C[C[C[C[1@#
... 
>>> import numpy
>>> import numpy[C[C[C[C#w = theano.shared()[C[C[C[C[1P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cn)u)m)p)y).)r)a)n)d)o)m).)r)a)n)d)n)()[C)3)),)) ))5))
>>> b = te[Kheano.shared()n)u)m)p)y)/)[1P).)z)e)r)o)s)()[C)5))
>>> y = T.doty[K()x),) )w)[C + b
>>> grads = T.grads()[1P()[Cy),) )w)r)t)=)()[C)w)),))b)) b))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/u/linzhou/.local/lib/python2.7/site-packages/theano/gradient.py", line 435, in grad
    raise TypeError("cost must be a scalar.")
TypeError: cost must be a scalar.
>>> grads = T.grad(y, wrt=(w, b))[1@T[1P[1P[1@T[1@.[1@s[1@u[1@m[1@([1@)[1@y
>>> dis_w = theano.shared()v)a)l)u)e)=)n)u)m)p)y).)z)e)r)o)s)()p).)s)h)a)p)e).)e)v)a)l)()[C),) )d)t)y)p)e)=)t)h)e)a)n)o).)c)o)n)f)i)g).)f)l)o)a)t)X)[C)[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[1P))[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C,) )[1P)[1P)[C[1P.shape.eval()))w.shape.eval()))
>>> dis_w = theano.shared(value=numpy.zeros(w.shape.eval()))[1P.shape.eval()))b.shape.eval()))[1P[1@b
>>> s[Km = dict()[)])w]),]) ])d])i])s])_])w])[C,) )[1P)[1P))])[1@([C[C[C[C[C[C[C[C[C,]) ])b])(b])[C,]) ])d])i])s])_])b]))])
>>> m
{<TensorType(float64, matrix)>: <TensorType(float64, matrix)>, <TensorType(float64, vector)>: <TensorType(float64, vector)>}
>>> update_m = {}[K[K[](])],] ](])][1@m[1@[[1@][1@w[C[C[1@,[1@ [1@m[1@[[1@][1@w[C[1@=[1P[1@+[1@1[C[C[C[Cm)][)]])]b])][C,)] )]m)][)]])]b])][C+)]1)]
>>> update_m
[(<TensorType(float64, matrix)>, Elemwise{add,no_inplace}.0), (<TensorType(float64, vector)>, Elemwise{add,no_inplace}.0)]
>>> updates[K_param = ()[K[K[](])],] ](])][1@w[1@,[1@ [1@w[1@+[1@ [1@g[1@r[1@a[1@d[1@s[1@[[1@][1@0[1@ [C[C[C[C[C[C[C[C[C[C[C[C[C[Cb)],)] )]b)] )]+)] )]g)]r)]a)]d)]s)][)]])]0])]
>>> w.get_value()
array([[ 0.1704314 ,  1.0645447 ,  0.81378625, -0.52154121, -0.6124718 ],
       [-1.51563096,  0.35566385, -0.43918362, -0.18754197,  0.04271041],
       [-0.09639136, -1.3787889 ,  0.35637861,  0.69396523,  1.34415058]])
>>> w.get_value()[C[C[C[Cbw.get_value()[C[C[C[C[C[1P.get_value()[C[C[C[C[C
array([ 0.,  0.,  0.,  0.,  0.])
>>> w[Km[]w][C.get_value()
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> m[w].get_value()[1P].get_value()[C[C[C[C[C[Cb].get_value()[C[C[C[C[C[C[C
array([ 0.,  0.,  0.,  0.,  0.])
>>> step = theano.funciton[K[K[K[Ktion()i)n)p)u)t)s)=)]),) )[1@[[C[1@x[C[C[Co)u)t)p)u)t)s)=)y),) )u)p)d)a)t)e)s)=)[C[C[C[C[1@#
... 
>>> upa[Kdate = update.[K_m + update_param
>>> d[Kupdate
[(<TensorType(float64, matrix)>, Elemwise{add,no_inplace}.0), (<TensorType(float64, vector)>, Elemwise{add,no_inplace}.0), (<TensorType(float64, matrix)>, Elemwise{add,no_inplace}.0), (<TensorType(float64, vector)>, Elemwise{add,no_inplace}.0)]
>>> update = update_m + update_param[C[C[C[C#step = theano.function(inputs=[x], outputs=y, updates=)u)p)d)a)t)e)
... #step = theano.function(inputs=[x], outputs=y, updates=update)[C[C[C[C[1P
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
  File "/u/linzhou/.local/lib/python2.7/site-packages/theano/compile/function.py", line 309, in function
    output_keys=output_keys)
  File "/u/linzhou/.local/lib/python2.7/site-packages/theano/compile/pfunc.py", line 487, in pfunc
    no_default_updates=no_default_updates)
  File "/u/linzhou/.local/lib/python2.7/site-packages/theano/compile/pfunc.py", line 214, in rebuild_collect_shared
    raise TypeError(err_msg, err_sug)
TypeError: ('An update must have the same type as the original shared variable (shared_var=<TensorType(float64, vector)>, shared_var.type=TensorType(float64, vector), update_val=Elemwise{add,no_inplace}.0, update_val.type=TensorType(float64, matrix)).', 'If the difference is related to the broadcast pattern, you can call the tensor.unbroadcast(var, axis_to_unbroadcast[, ...]) function to remove broadcastable dimensions.')
>>> step = theano.function(inputs=[x], outputs=y, updates=update)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/u/linzhou/.local/lib/python2.7/site-packages/theano/compile/function.py", line 309, in function
    output_keys=output_keys)
  File "/u/linzhou/.local/lib/python2.7/site-packages/theano/compile/pfunc.py", line 487, in pfunc
    no_default_updates=no_default_updates)
  File "/u/linzhou/.local/lib/python2.7/site-packages/theano/compile/pfunc.py", line 214, in rebuild_collect_shared
    raise TypeError(err_msg, err_sug)
TypeError: ('An update must have the same type as the original shared variable (shared_var=<TensorType(float64, vector)>, shared_var.type=TensorType(float64, vector), update_val=Elemwise{add,no_inplace}.0, update_val.type=TensorType(float64, matrix)).', 'If the difference is related to the broadcast pattern, you can call the tensor.unbroadcast(var, axis_to_unbroadcast[, ...]) function to remove broadcastable dimensions.')
>>> m[w]+1).shape.eval()[C[C[C[C(m[w]+1).shape.eval()[C[C[C[C[C
array([3, 5])
>>> (m[w]+1).shape.eval()[1P]+1).shape.eval()[C[C[C[C[C[C[Cb]+1).shape.eval()[C[C[C[C[C[C[C[C
array([5])
>>> update_param = [(w, w + grads[0]), (b, b + grads[0])][1P])]1])]
>>> update = update_m + update_param
>>> step = theano.function(inputs=[x], outputs=y, updates=update)
WARNING (theano.tensor.blas): We did not found a dynamic library into the library_dir of the library we use for blas. If you use ATLAS, make sure to compile it with dynamics library.
>>> w.get_value()
array([[ 0.1704314 ,  1.0645447 ,  0.81378625, -0.52154121, -0.6124718 ],
       [-1.51563096,  0.35566385, -0.43918362, -0.18754197,  0.04271041],
       [-0.09639136, -1.3787889 ,  0.35637861,  0.69396523,  1.34415058]])
>>> b.get_value()
array([ 0.,  0.,  0.,  0.,  0.])
>>> m[w].get_value()
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
>>> m[b].get_value()
array([ 0.,  0.,  0.,  0.,  0.])
>>> step()n)u)m)p)y).)a)s)a)r)r)a)y)()[C)[1P())[1P())[1P())[1P())[1P())[1P())[1P())r())a())n())d())o())m()).())r())a())n())d())n())[C()))())[1P())[1P))[C1))0))0)),)) ))2))3))3))[1P))[1P))[1P))3))
array([[-0.68769054,  4.51479133,  2.04905293, -2.23364268, -2.69771474],
       [ 0.25762261,  3.02705797,  0.06530013, -1.51253855, -2.60991006],
       [ 2.30435757,  2.25450641,  0.28945737, -1.11784447, -2.57700843],
       [-0.03703355, -1.89215126,  0.31392197,  0.95034665,  1.7377126 ],
       [ 0.34231693,  0.96676794, -0.10790921, -0.48403786, -0.97821383],
       [ 0.72465383,  1.65787853,  1.45652767, -0.80858216, -1.03385203],
       [ 0.91414863,  2.3849533 ,  0.74119086, -1.18094797, -2.01305381],
       [ 0.32083398, -0.06489019, -0.04777546,  0.03268838, -0.07708108],
       [ 0.09696869, -0.20036006,  0.90828982,  0.11215407,  0.51753569],
       [ 2.07457655,  2.36021385,  0.27548835, -1.17150259, -2.59195691],
       [ 1.17194991, -1.94384649,  0.38045663,  0.98024881,  1.38881727],
       [ 2.80235866, -2.89588454,  0.11113233,  1.45727154,  1.50969151],
       [ 0.86932851,  0.29422782,  0.3747714 , -0.14005116, -0.39209064],
       [ 1.10077348,  0.93515139,  1.56400372, -0.44471747, -0.51106834],
       [-1.54764122,  1.51846284,  0.08169561, -0.76252922, -0.70544689],
       [ 0.55314364, -2.24870649, -1.79995416,  1.10305323,  0.94210935],
       [-0.98523155,  1.33963967, -1.27450934, -0.6890472 , -1.32181877],
       [-3.52995272, -3.74941214, -1.86446566,  1.8420661 ,  3.59798535],
       [-1.76717794,  0.39702421, -1.59937045, -0.22381634, -0.39335353],
       [ 0.02409516,  2.00010775, -1.34077227, -1.01758611, -2.25663954],
       [-0.31766313, -1.75893311, -0.42144355,  0.87351501,  1.41340324],
       [ 1.5398405 ,  1.63310296, -0.0127893 , -0.8129389 , -1.91543717],
       [-0.44208756, -0.81375674, -0.72165183,  0.39657178,  0.53466986],
       [-1.13239396, -1.19755693, -0.68462296,  0.58719402,  1.11336675],
       [-1.11056441,  0.34199952, -0.61228003, -0.18186523, -0.15957075],
       [-0.42297526, -0.85850567, -2.0316797 ,  0.40215382,  0.01383813],
       [-1.83403541,  2.82640498,  1.12343626, -1.40408482, -1.26789169],
       [-1.26580397, -3.92655129, -1.6135388 ,  1.93986783,  3.06540691],
       [-1.37415366, -0.57389276, -0.19290636,  0.28093993,  0.87964815],
       [-0.97849916,  0.77809873, -0.32893274, -0.395998  , -0.45319528],
       [ 2.31936214, -0.66802446,  0.2862179 ,  0.34392982, -0.12374251],
       [-1.37511642,  1.92518807, -1.35764188, -0.98402173, -1.71409958],
       [ 0.72758229,  0.69169921,  0.92526951, -0.33214934, -0.44544511],
       [ 1.05502372, -0.63971013, -0.63525122,  0.31457926, -0.09605917],
       [ 5.05228735, -0.5709206 ,  1.11497549,  0.31323142, -0.80675653],
       [-1.17704453, -1.26827528,  1.39183653,  0.64915691,  2.06312626],
       [-1.37266878, -0.51487524, -0.84570826,  0.24302789,  0.55446459],
       [-1.67159935,  2.59465002, -1.26773627, -1.31849552, -2.13659803],
       [-0.86474322, -2.79824677,  0.84789118,  1.4082374 ,  3.01313674],
       [ 0.91555652, -0.13163325,  0.06130873,  0.06904377, -0.18177249],
       [ 1.87236617,  0.87546795, -0.57515938, -0.4403453 , -1.63028483],
       [-3.81915875,  3.2243488 , -0.82830325, -1.63346859, -1.73466251],
       [-1.39747072,  0.50144986, -0.87457812, -0.26574913, -0.30449671],
       [-0.78769874,  3.05141559,  0.61204743, -1.5204468 , -2.0365747 ],
       [-1.61589301,  3.39878941,  0.04866706, -1.70362615, -2.27826651],
       [-1.67410955, -0.6213836 ,  0.68902536,  0.31524641,  1.3954467 ],
       [ 0.83936767, -1.94402412,  1.04950376,  0.98806604,  1.7864614 ],
       [-0.69248008,  2.65267813, -2.05776426, -1.35509849, -2.85873592],
       [ 1.28304122,  0.51652715, -0.48092768, -0.2611549 , -1.08353215],
       [ 0.47517613, -1.73418238,  0.06883449,  0.86953344,  1.32338425],
       [-0.96790646,  0.46888869,  0.10952639, -0.23567115, -0.01192065],
       [-1.91743066,  1.48533119, -0.78551924, -0.75808807, -0.91427771],
       [ 0.11329682,  0.73884828,  0.70464961, -0.3601906 , -0.36444304],
       [ 1.90720579, -3.18444163,  0.0366478 ,  1.59828076,  2.03248579],
       [ 1.09332436, -0.31843577,  0.02926891,  0.16253458, -0.09986078],
       [ 0.8480813 , -3.8807491 , -0.48050984,  1.9371098 ,  2.76902346],
       [-1.61653663, -1.12961119, -1.06275831,  0.54706805,  1.0652529 ],
       [ 1.56478954, -0.56269674,  0.28520248,  0.28924367,  0.04958601],
       [-0.31268193,  0.75113237, -0.88668883, -0.38792779, -0.89699662],
       [-2.51137558, -0.51039882,  0.03225388,  0.2490777 ,  1.31653359],
       [ 0.49268458, -0.69019791,  1.53788012,  0.36630098,  1.05742618],
       [-1.31368669,  2.3646943 , -0.23441546, -1.18924173, -1.63222824],
       [-0.04358133, -0.69840971,  1.00969782,  0.36219955,  1.0283319 ],
       [-2.55471667, -0.50634061,  0.21697254,  0.24930955,  1.4060029 ],
       [-0.82725752,  1.10899892, -2.27442418, -0.58613146, -1.60384337],
       [ 0.45298694,  0.64943068,  1.35099683, -0.3062561 , -0.13503772],
       [-2.76701746,  0.84481656, -1.35901702, -0.44733707, -0.32130179],
       [ 1.95165057,  2.03046973, -0.18120755, -1.01277161, -2.46405123],
       [-2.60940054, -1.1089217 , -0.88393481,  0.53640037,  1.4684451 ],
       [ 0.30365575, -0.66752169,  0.49895673,  0.34109669,  0.66642945],
       [-1.61118328,  0.44823063, -0.54874183, -0.23550287, -0.04812391],
       [-2.4675497 , -1.81127793, -0.82990747,  0.88877047,  2.03303657],
       [-1.22786565,  3.06733762, -0.94175601, -1.54955822, -2.5514446 ],
       [-0.23326231,  0.26208971,  0.19897848, -0.12914667, -0.05565812],
       [ 0.20271984,  5.73305552,  0.92670645, -2.85507513, -4.50554522],
       [ 1.29043454,  1.62415063, -0.45966454, -0.81486727, -2.00941549],
       [-0.12014092,  1.73774671, -0.16781449, -0.8716527 , -1.49154612],
       [ 1.13140896, -2.27145753,  0.48368809,  1.14533249,  1.72214711],
       [ 1.39505931,  2.91596945,  0.34175288, -1.45041798, -2.79550592],
       [-1.85417379, -0.87156228, -0.38579798,  0.42607915,  1.21586729],
       [ 1.92052128,  1.85505565, -0.06350423, -0.92360203, -2.25599989],
       [ 1.68332352,  0.53372949, -0.65687322, -0.27096616, -1.31132974],
       [ 1.12327948, -3.3048134 ,  0.03001467,  1.65633411,  2.40362357],
       [-1.66981098,  0.38980216,  1.24015581, -0.18342281,  0.77501652],
       [ 1.23931117,  1.45181165,  1.03329502, -0.70959883, -1.21767208],
       [ 1.29677391,  1.36461846, -0.17144376, -0.68133175, -1.67176277],
       [ 0.18318999,  2.60002738,  0.09551655, -1.29875632, -2.21187185],
       [ 2.93537897,  0.67683779,  1.66329105, -0.30939811, -0.88982445],
       [ 1.03589055, -3.29254785,  0.22281559,  1.6524486 ,  2.50490754],
       [ 0.44891767,  2.2223683 , -0.02777614, -1.11074557, -2.03834823],
       [-0.21345298,  1.17598749,  0.10552042, -0.5874052 , -0.87112969],
       [ 2.78724131, -2.73988872,  0.41687341,  1.38313917,  1.51244301],
       [ 1.49205067, -1.04775041,  0.88557565,  0.5393859 ,  0.73605108],
       [-0.60649446,  3.82618052,  1.35405337, -1.89794234, -2.43912725],
       [-0.00800814, -0.62392148,  0.63308   ,  0.32019189,  0.79461504],
       [-1.31904387, -0.55590163, -0.89489024,  0.26305711,  0.54962942],
       [ 1.32772488,  0.4221893 ,  2.49145682, -0.1756183 ,  0.23244956],
       [ 1.64948255, -0.26783199,  0.85055604,  0.14925525,  0.01010566],
       [-0.64769541,  0.80474921, -0.7787951 , -0.41424164, -0.78017105],
       [-0.31499947,  1.24157346, -0.16890976, -0.62400752, -1.00662255]])
>>> step(numpy.random.randn(100, 3))[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kw.get_value()
array([[  6.3591791 ,   7.2532924 ,   7.00253395,   5.66720649,   5.5762759 ],
       [  1.61866592,   3.48996073,   2.69511326,   2.9467549 ,
          3.17700729],
       [-16.55675668, -17.83915423, -16.10398672, -15.7664001 ,
        -15.11621475]])
>>> b.get_value()
array([ 100.,  100.,  100.,  100.,  100.])
>>> m[w].get_value()
array([[ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.,  1.]])
>>> m[b].get_value()
array([ 1.,  1.,  1.,  1.,  1.])
>>> m[b].get_value()[C[C[C[C[C[Cw].get_value()[C[C[C[C[3Pb.get_value()[C[C[C[Cw.get_value()[C[C[C[Cstep(numpy.random.randn(100, 3))[C[C[C[C[1@a[1@a[1@a[1@ [1@=[1@ 
>>> aaa = step(numpy.random.randn(100, 3))[C[C[C[C[22Pm[b].get_value()[C[C[C[C[C[Cw].get_value()[C[C[C[C[3Pb.get_value()[C[C[C[Cw.get_value()
array([[ 17.13434361,  18.02845691,  17.77769846,  16.442371  ,
         16.35144041],
       [  4.76488455,   6.63617936,   5.84133189,   6.09297354,
          6.32322592],
       [-24.66951703, -25.95191457, -24.21674706, -23.87916044,
        -23.22897509]])
>>> w.get_value()[C[C[C[Caaa = step(numpy.random.randn(100, 3))[C[C[C[C[22Pm[b].get_value()[C[C[C[C[C[Cw].get_value()[C[C[C[C[3Pb.get_value()
array([ 200.,  200.,  200.,  200.,  200.])
>>> b.get_value()[C[C[C[Cw.get_value()[C[C[C[Caaa = step(numpy.random.randn(100, 3))[C[C[C[C[22Pm[b].get_value()[C[C[C[C[C[Cw].get_value()
array([[ 2.,  2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.,  2.]])
>>> m[w].get_value()[C[C[C[C[3Pb.get_value()[C[C[C[Cw.get_value()[C[C[C[Caaa = step(numpy.random.randn(100, 3))[C[C[C[C[22Pm[b].get_value()
array([ 2.,  2.,  2.,  2.,  2.])
>>> numy[K[K>>> num